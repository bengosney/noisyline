{"version":3,"sources":["Noise.js","App.js","serviceWorker.js","index.js"],"names":["Noise","length","range","arguments","undefined","radius","Object","classCallCheck","this","noise","OpenSimplexNoise","Date","now","a","r","start","findStart","reset","value","r1","r2","Math","PI","y1","y2","y","theta","atan2","prev","get","smallestAngle","Number","MAX_SAFE_INTEGER","bestStart","i","cur","angle","abs","step","x","cos","sin","scale","noise2D","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","height","width","lenth","yOffset","drawing","ctx","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_window","innerWidth","innerHeight","floor","setState","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawLine","nextFrame","_this3","_this$state","fillStyle","fillRect","getTime","_this$state2","xOffset","beginPath","strokeStyle","concat","n","lineTo","stroke","_this$state3","react_default","createElement","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa847120.chunk.js","sourcesContent":["import OpenSimplexNoise from 'open-simplex-noise';\n\nclass Noise {\n    constructor(length, range = [1, 100], radius = 2) {\n\tthis.noise = new OpenSimplexNoise(Date.now());\n\tthis.length = length;\n\tthis.a = 0;\n\tthis.range = range;\n\tthis.r = radius;\n\tthis.start = 0;\n\t\n\tthis.findStart();\n\tthis.reset();\n    }\n\n    scale( value, r1, r2 ) { \n\treturn (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    reset() {\n\tthis.a = this.start;\n    }\n\n    step() {\n\treturn Math.PI / this.length;\n    }\n\n    angle(y1, y2) {\n\tconst y = y1 - y2;\n\tconst x = 10;\n\tlet theta = Math.atan2(y, x);\n\ttheta *= 180 / Math.PI;\n\n\treturn theta;\n    }\n\n    findStart() {\n\tlet prev = this.get();\n\tlet prevDiff = Number.MAX_SAFE_INTEGER;\n\n\tlet smallestAngle = Number.MAX_SAFE_INTEGER;\n\tlet bestStart = 0;\n\n\tfor (let i = 0 ; i < this.length ; i++) {\n\t    const cur = this.get();\n\t    const angle = Math.abs(this.angle(prev, cur));\n\n\t    if (angle < smallestAngle) {\n\t\tsmallestAngle = angle;\n\t\tbestStart = this.a  - (this.step() * 2);\n\t    }\n\n\t    prev = cur;\n\t}\n\n\tthis.start = bestStart;\n    }\n\n    get() {\n\tconst step = this.step();\n\t\n\tconst { r, a } = this;\n\tconst x = r * Math.cos(a);\n\tconst y = r * Math.sin(a);\n\n\tthis.a += step;\n\n\treturn this.scale(this.noise.noise2D(x, y), [0, 1], this.range);\n    }\n}\n\n\nexport default Noise;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Noise from './Noise';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    pixelSize: 8,\r\n\t    height: 500,\r\n\t    width: 150,\r\n\t    lenth: 100,\r\n\t    range: 20,\r\n\t    noise: new Noise(100),\r\n\t    yOffset: null\r\n\t};\r\n\t\r\n\tthis.drawing = false;\r\n\tthis.ctx = null;\r\n\r\n\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n\tthis.startts = this.getTS();\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n\tconst canvas = this.refs.canvas;\r\n\tthis.ctx = canvas.getContext(\"2d\");\r\n\r\n\t\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n\tthis.updateWindowDimensions();\r\n\twindow.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    updateWindowDimensions() {\r\n\tconst { innerWidth, innerHeight } = window;\r\n\tconst { range } = this.state;\r\n\r\n\tconst length = Math.floor(innerWidth / 4);\r\n\tconst noise = new Noise(length, [-range, range]);\r\n\t\r\n\tthis.setState({ width: innerWidth, height: innerHeight, noise: noise, length: length });\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n\tcancelAnimationFrame(this.rAF);\r\n\twindow.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateAnimationState() {\r\n\tthis.ts = this.getTS();\r\n\tthis.clearFrame();\r\n\r\n\tthis.drawLine();\r\n\t\t\r\n\tthis.nextFrame();\r\n    }\r\n\r\n    nextFrame() {\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n    }\r\n\r\n    clearFrame() {\r\n\tconst { width, height } = this.state;\r\n\tconst { ctx } = this;\r\n\r\n\tctx.fillStyle = \"#000000\";\r\n\tctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    getTS() {\r\n\tconst date = new Date();\r\n\t\r\n\treturn date.getTime();\r\n    }\r\n\r\n    scale( value, r1, r2 ) { \r\n\treturn ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\r\n    }\r\n    \r\n    drawLine() {\r\n\tconst { ctx } = this;\r\n\tconst { width, height, noise } = this.state;\r\n\tconst y = Math.floor(height / 2);\r\n\r\n\tconst xOffset = Math.floor(width / 4);\r\n\r\n\tctx.beginPath();\r\n\tconst colour = 255;\r\n\tctx.strokeStyle = `rgba(${colour}, ${colour}, ${colour}, 1)`;\r\n\r\n\tlet yOffset = null;\r\n\tnoise.reset();\r\n\t\r\n\tfor (let x = 0 ; x < width; x++) {\r\n\t    if (x > xOffset && x < (xOffset * 3)) {\r\n\t\tconst n = noise.get();\r\n\t\tyOffset = yOffset || n;\r\n\t\tctx.lineTo(x, (y + n) - yOffset);\r\n\t    } else {\r\n\t\tctx.lineTo(x, y);\r\n\t    }\r\n\t}\r\n\r\n\tctx.stroke();\r\n    }\r\n    \r\n    render() {\r\n\tconst { width, height } = this.state;\r\n\r\n        return (\r\n\t    <div>\r\n              <div>\r\n\t\t<canvas ref=\"canvas\" width={ width } height={ height } />\r\n              </div>\r\n            </div>\r\n\t);\t\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}